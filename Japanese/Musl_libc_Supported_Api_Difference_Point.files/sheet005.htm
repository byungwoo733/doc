<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:x="urn:schemas-microsoft-com:office:excel"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=Excel.Sheet>
<meta name=Generator content="Microsoft Excel 15">
<link id=Main-File rel=Main-File
href="../Musl_libc_Supported_Api_Difference_Point.htm">
<link rel=File-List href=filelist.xml>
<link rel=Stylesheet href=stylesheet.css>
<style>
<!--table
	{mso-displayed-decimal-separator:"\.";
	mso-displayed-thousand-separator:"\,";}
@page
	{margin:.75in .7in .75in .7in;
	mso-header-margin:.3in;
	mso-footer-margin:.3in;}
ruby
	{ruby-align:left;}
rt
	{color:windowtext;
	font-size:6.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:"ＭＳ Ｐゴシック", monospace;
	mso-font-charset:128;
	mso-char-type:katakana;
	display:none;}
-->
</style>
<![if !supportTabStrip]><script language="JavaScript">
<!--
function fnUpdateTabs()
 {
  if (parent.window.g_iIEVer>=4) {
   if (parent.document.readyState=="complete"
    && parent.frames['frTabs'].document.readyState=="complete")
   parent.fnSetActiveSheet(4);
  else
   window.setTimeout("fnUpdateTabs();",150);
 }
}

if (window.name!="frSheet")
 window.location.replace("../Musl_libc_Supported_Api_Difference_Point.htm");
else
 fnUpdateTabs();
//-->
</script>
<![endif]>
</head>

<body link=blue vlink=purple class=xl78>

<table border=0 cellpadding=0 cellspacing=0 width=1123 style='border-collapse:
 collapse;table-layout:fixed;width:843pt'>
 <col class=xl78 width=30 style='mso-width-source:userset;mso-width-alt:960;
 width:23pt'>
 <col class=xl78 width=73 style='width:55pt'>
 <col class=xl78 width=264 style='mso-width-source:userset;mso-width-alt:8448;
 width:198pt'>
 <col class=xl78 width=73 style='width:55pt'>
 <col class=xl78 width=127 style='mso-width-source:userset;mso-width-alt:4064;
 width:95pt'>
 <col class=xl78 width=93 style='mso-width-source:userset;mso-width-alt:2976;
 width:70pt'>
 <col class=xl79 width=463 style='mso-width-source:userset;mso-width-alt:14816;
 width:347pt'>
 <col class=xl78 width=73 span=2 style='width:55pt'>
 <col class=xl78 width=111 style='mso-width-source:userset;mso-width-alt:3552;
 width:83pt'>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl78 width=30 style='height:13.5pt;width:23pt'></td>
  <td class=xl78 width=73 style='width:55pt'></td>
  <td class=xl78 width=264 style='width:198pt'></td>
  <td class=xl78 width=73 style='width:55pt'></td>
  <td class=xl78 width=127 style='width:95pt'></td>
  <td class=xl78 width=93 style='width:70pt'></td>
  <td class=xl79 width=463 style='width:347pt'></td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl78 style='height:13.5pt'></td>
  <td colspan=5 rowspan=2 class=xl219 width=630 style='border-right:.5pt solid black;
  border-bottom:.5pt solid black;width:473pt'>注意:<br>
    部分的なサポート = オープンPOSIXテストスイートで部分的に失敗した機能（テストプログラムでテストケースの一部はパスしました）。<br>
    動作がmusl-libcでの実装および/またはVEアーキテクチャの制限によるものであるため、テストシナリオはFADと記載されています。<br>
    FAD: Function As designed（機能設計通り）</td>
  <td class=xl79 width=463 style='width:347pt'></td>
 </tr>
 <tr height=109 style='mso-height-source:userset;height:81.75pt'>
  <td height=109 class=xl78 style='height:81.75pt'></td>
  <td class=xl79 width=463 style='width:347pt'></td>
 </tr>
 <tr height=19 style='height:14.25pt'>
  <td height=19 class=xl78 style='height:14.25pt'></td>
  <td class=xl78></td>
  <td class=xl78></td>
  <td class=xl78></td>
  <td class=xl78></td>
  <td class=xl78></td>
  <td class=xl79 width=463 style='width:347pt'></td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl94>No</td>
  <td class=xl95 style='border-left:none'>API<ruby>名<span style='display:none'><rt>メイ</rt></span></ruby></td>
  <td class=xl96 width=73 style='border-left:none;width:55pt'>サイズ<br>
    (バイト)</td>
  <td class=xl95 style='border-left:none'><ruby>備考<span style='display:none'><rt>ビコウ</rt></span></ruby></td>
  <td class=xl97 style='border-left:none'><ruby>状態<span style='display:none'><rt>ジョウタイ</rt></span></ruby></td>
  <td class=xl98 width=463 style='border-left:none;width:347pt'>musl-libcとの相違点</td>
 </tr>
 <tr height=90 style='height:67.5pt'>
  <td height=90 class=xl78 style='height:67.5pt'></td>
  <td class=xl88>1</td>
  <td class=xl85 style='border-left:none'>pthread_mutexattr_getprotocol</td>
  <td class=xl85 style='border-left:none'>384</td>
  <td class=xl85 style='border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-left:none;width:347pt'>musl-libcはPTHREAD_PRIO_NONEのみサポートしています。<br>
    musl-libcは以下の2つのフラグはサポートしていません:<br>
    PTHREAD_PRIO_INHERIT <br>
    PTHREAD_PRIO_PROTECT<br>
    </td>
 </tr>
 <tr height=252 style='height:189.0pt'>
  <td height=252 class=xl78 style='height:189.0pt'></td>
  <td class=xl88 style='border-top:none'>2</td>
  <td class=xl85 style='border-top:none;border-left:none'>sem_unlink</td>
  <td class=xl85 style='border-top:none;border-left:none'>392</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>2つのシナリオの相違点<br>
    1.<br>
   
  テストプログラムはsem_open()でセマフォを作成しfork()を実行します。子プロセスはそのuidを変更してセマフォのリンクを解除しようとしますが、EACCESSで<ruby>失敗<span
  style='display:none'><rt>シッパイ</rt></span></ruby>します。<br>
    VEではmusl libcの実装によりunlink（）は失敗しますが、EPERMをリターンします。<br>
    <br>
    2.<br>
    テストプログラムはNAME_MAX(サイズ256)より大きなサイズ名でセマフォを作成します。.<br>
    次にリンクを解除しようとすると、errno ENAMETOOLONGで失敗します。<br>
    VEではmusl libcの実装によりunlink()は成功します。<br>
    </td>
 </tr>
 <tr class=xl93 height=180 style='height:135.0pt'>
  <td height=180 class=xl93 style='height:135.0pt'>　</td>
  <td class=xl88 style='border-top:none'>3</td>
  <td class=xl85 style='border-top:none;border-left:none'>aio_return</td>
  <td class=xl85 style='border-top:none;border-left:none'>360</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>glibcとmusl
  libcの動作が同じであるという結論は出ていません。<br>
    また、マニュアルページでは戻り値が保証されていません。<br>
    <br>
    説明 : <br>
    マニュアルページによると、aio_returnバイト数は正常に書き込まれています。<br>
    連続して2回呼び出されると、未定義の動作と共にリターンされます。<br>
    よってマニュアルページによるとmusl libcとglibcは予想されたとおりに動作します。<br>
    </td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>4</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_cond_signal</td>
  <td class=xl85 style='border-top:none;border-left:none'>840</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>FAD<br>
    Robust futexとそれに対応するシステムコールはFCSではサポートされていません。</td>
 </tr>
 <tr height=319 style='mso-height-source:userset;height:239.25pt'>
  <td height=319 class=xl78 style='height:239.25pt'></td>
  <td class=xl88 style='border-top:none'>5</td>
  <td class=xl85 style='border-top:none;border-left:none'>sigpause</td>
  <td class=xl85 style='border-top:none;border-left:none'>552</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl90 width=463 style='border-top:none;border-left:none;width:347pt'>これはmuslとglibcの違いでありglibcはsigdelset().に対しチェックを適用します。シグナルがパスする場合sigdelsetは無効であるため-1をリターンしerrnoをEINVALにセットします。musl-libcではsigpause()から呼び出された場合そのようなチェックはsigdelset()に無く、実行を延期したsigsuspendを直接呼び出します。これはmusl-libcでは予想された動作となります。<br>
    <br>
    動作をglibcと一致させるために、以下の変更が musl-libc platform-independentファイルで必要となります。<br>
    <br>
    File name: ./src/signal/sigpause.c<br>
    <span style='mso-spacerun:yes'>        </span>sigprocmask(0, 0,
  &amp;mask);<br>
    -<span style='mso-spacerun:yes'>       </span>sigdelset(&amp;mask,
  sig);<br>
    +<span style='mso-spacerun:yes'>       </span>if(sigdelset(&amp;mask,
  sig))<br>
    +<span style='mso-spacerun:yes'>               </span>return -1;<br>
    <br>
    <span style='mso-spacerun:yes'> </span><br>
    <br>
    </td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl78 style='height:13.5pt'></td>
  <td class=xl88 style='border-top:none'>6</td>
  <td class=xl85 style='border-top:none;border-left:none'>sem_timedwait</td>
  <td class=xl85 style='border-top:none;border-left:none'>2160</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>muslはsem_timedwaitにおいてEINTRのerrnoを処理しません。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>7</td>
  <td class=xl85 style='border-top:none;border-left:none'>__pthread_cond_timedwait</td>
  <td class=xl85 style='border-top:none;border-left:none'>4912</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>FAD
  (Function As Designed). <br>
    Robust futexとそれに対応するシステムコールはサポートされていません。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>8</td>
  <td class=xl85 style='border-top:none;border-left:none'>timer_create</td>
  <td class=xl85 style='border-top:none;border-left:none'>4840</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>VE環境では、
  &quot;CLOCK_THREAD_CPUTIME_ID&quot;はサポートされていません。
  &quot;timer_create&quot;システムコールは、同じクロックIDで呼び出された場合EINVALをリターンします。</td>
 </tr>
 <tr class=xl93 height=180 style='height:135.0pt'>
  <td height=180 class=xl93 style='height:135.0pt'>　</td>
  <td class=xl88 style='border-top:none'>9</td>
  <td class=xl85 style='border-top:none;border-left:none'>aio_cancel</td>
  <td class=xl85 style='border-top:none;border-left:none'>1888</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>テストケースは進行中のIN
  PROGRESS非同期読み取り/書き込み操作を取り消すことが予想されています。<br>
    分析 :<br>
   
  読み取り/書き込みを取り消すには、操作はONGOINGでなければなりません。VEの場合では非常に速く完了することがaio_returnを使用して検証されています。<br>
    このため、aio_errorはECANCELLEDをリターンせず、&quot;PASSED&quot;をプリントする前に戻ります。 <br>
    <br>
    結論 :VEにおいての非同期読み書きは常に成功します。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>10</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_cancel</td>
  <td class=xl85 style='border-top:none;border-left:none'>880</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>musl実装の問題、muslはpthread_joinの呼び出し後pthread構造体を削除します。したがって、pthreadのセグフォルトは予想される動作をキャンセルします。</td>
 </tr>
 <tr height=144 style='height:108.0pt'>
  <td height=144 class=xl78 style='height:108.0pt'></td>
  <td class=xl88 style='border-top:none'>11</td>
  <td class=xl85 style='border-top:none;border-left:none'>sem_wait</td>
  <td class=xl85 style='border-top:none;border-left:none'>408</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>シナリオ:<br>
    子プロセスはsem_wait（）を呼び出しブロックします。<br>
    親プロセスはSIGABRTシグナルを子プロセスに送り、sem_wait（）からEINTR errnoと共にリターンされます。<br>
    <br>
    理解:<br>
    musl
  libcにおいてsem_wait（）はループ内で内部的にfutex（）を呼び出します。信号によって中断されたとしても、再びfutex待機に入ります。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>12</td>
  <td class=xl85 style='border-top:none;border-left:none'>sem_post</td>
  <td class=xl85 style='border-top:none;border-left:none'>1032</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>テストプログラムで_POSIX_PRIORITY_SCHEDULINGフラグを定義する必要があります。<br>
    このフラグはmuslでは定義されていません。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>13</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_cond_broadcast</td>
  <td class=xl85 style='border-top:none;border-left:none'>840</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>FAD<br>
    Robust futexとそれに対応するシステムコールはサポートされていません。</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl88 style='border-top:none'>14</td>
  <td class=xl85 style='border-top:none;border-left:none'>sigwaitinfo</td>
  <td class=xl85 style='border-top:none;border-left:none'>432</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>raise（）はsi_codeを-6に設定するtkillを使って実装されています。
  したがってこれは予想された動作となります。</td>
 </tr>
 <tr height=108 style='height:81.0pt'>
  <td height=108 class=xl78 style='height:81.0pt'></td>
  <td class=xl88 style='border-top:none'>15</td>
  <td class=xl85 style='border-top:none;border-left:none'>__pthread_join</td>
  <td class=xl85 style='border-top:none;border-left:none'>1120</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>musl実装の問題、muslは
  pthread_joinの呼び出し後にpthread構造体を削除します。<br>
    いくつかのテストプログラムにおいては100％再現可能ではありません。<br>
   
  このシナリオでは、VEOSはセグメンテーション・フォルトを取得し、ピア・ソケットはクローズされます。そのため、疑似プロセスはVEOSからEOFを受け取り、failをリターンします。</td>
 </tr>
 <tr height=72 style='height:54.0pt'>
  <td height=72 class=xl78 style='height:54.0pt'></td>
  <td class=xl88 style='border-top:none'>16</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_join</td>
  <td class=xl85 style='border-top:none;border-left:none'>1120</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>musl実装の問題、muslは
  pthread_joinの呼び出し後にpthread構造体を削除します。<br>
    <br>
    より<ruby>詳細<span style='display:none'><rt>ショウサイ</rt></span></ruby>の<ruby>情報<span
  style='display:none'><rt>ジョウホウ</rt></span></ruby>は、musl-glibc<ruby>相違点<span
  style='display:none'><rt>ソウイテン</rt></span></ruby>シートNo.8&amp;9をご<ruby>参照<span
  style='display:none'><rt>サンショウ</rt></span></ruby>ください。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>17</td>
  <td class=xl85 style='border-top:none;border-left:none'>sem_init</td>
  <td class=xl85 style='border-top:none;border-left:none'>720</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>POSIX準拠によるとsem_initの最大制限は256です。<br>
    musl-libcでは、sem_initはこの制限（256）を超えて初期化を行うことができます。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>18</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_kill</td>
  <td class=xl85 style='border-top:none;border-left:none'>728</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl117 width=463 style='border-top:none;border-left:none;width:347pt'>muslの実装の問題　musl
  pthread_joinの後にpthread構造体を削除するcall.pthread_kill（）がpthread構造体にアクセスしようとしたため、segfaultを取得しました。</td>
 </tr>
 <tr class=xl93 height=144 style='height:108.0pt'>
  <td height=144 class=xl93 style='height:108.0pt'>　</td>
  <td class=xl88 style='border-top:none'>19</td>
  <td class=xl85 style='border-top:none;border-left:none'>aio_suspend</td>
  <td class=xl85 style='border-top:none;border-left:none'>3272</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>aio_suspend（）を確認するには、書き込み操作を実行する必要があります。<br>
    &quot;aio_error（）&quot;は、書き込み操作が成功したかどうかをチェックします。<br>
    &quot;aio_error（）&quot;がエラーをリターンした場合、
  &quot;aio_suspend（）&quot;が呼び出されます。<br>
    <br>
    VEアーキテクチャではすべての書き込みが成功するため、 &quot;aio_error（）&quot;は0をリターンしaio_suspendは呼び出されません。</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl78 style='height:13.5pt'></td>
  <td class=xl88 style='border-top:none'>20</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_rwlock_wrlock</td>
  <td class=xl85 style='border-top:none;border-left:none'>408</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>Musl-libcは既にロックされている場合、ロック変数の確認に失敗します。</td>
 </tr>
 <tr class=xl93 height=54 style='height:40.5pt'>
  <td height=54 class=xl93 style='height:40.5pt'>　</td>
  <td class=xl88 style='border-top:none'>21</td>
  <td class=xl85 style='border-top:none;border-left:none'>aio_error</td>
  <td class=xl85 style='border-top:none;border-left:none'>408</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>1.musl
  libcとglibcで同じ動作をします。<br>
    2.aioの読み書き操作なしでaio_error（）を呼び出すと、posix標準から予想されたEINVALは得られません。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>22</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_sigmask</td>
  <td class=xl85 style='border-top:none;border-left:none'>848</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>LinuxとVEでのシグナル配信動作が異なるため失敗します。<br>
    この環境では、シグナルが渡される前にsigqueue（）がリターンされる可能性があります。</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl88 style='border-top:none'>23</td>
  <td class=xl85 style='border-top:none;border-left:none'>fork</td>
  <td class=xl85 style='border-top:none;border-left:none'>1040</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>このシナリオでは、sched_get_priority_max（）が呼び出されこれはVEアーキテクチャではサポートされていません。</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl88 style='border-top:none'>24</td>
  <td class=xl85 style='border-top:none;border-left:none'>shm_unlink</td>
  <td class=xl85 style='border-top:none;border-left:none'>576</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>sem_unlinkはshm_unlinkを内部で呼び出します。
  これについては、No.2を参照してください。</td>
 </tr>
 <tr height=90 style='height:67.5pt'>
  <td height=90 class=xl78 style='height:67.5pt'></td>
  <td class=xl88 style='border-top:none'>25</td>
  <td class=xl85 style='border-top:none;border-left:none'>sigqueue</td>
  <td class=xl85 style='border-top:none;border-left:none'>1128</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>linuxとVEの間でシグナル配信の動作に違いがあります。<br>
    Linuxでは、sigqueue（）の戻り値を更新する前にhandlerが呼び出されます。<br>
    VEでは、シグナルが送られる前にsigqueue（）の戻り値が更新される可能性があります。</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl78 style='height:13.5pt'></td>
  <td class=xl88 style='border-top:none'>26</td>
  <td class=xl85 style='border-top:none;border-left:none'>sigismember</td>
  <td class=xl85 style='border-top:none;border-left:none'>664</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>&quot;sigismember&quot;は無効な入力を処理しません。</td>
 </tr>
 <tr height=234 style='height:175.5pt'>
  <td height=234 class=xl78 style='height:175.5pt'></td>
  <td class=xl88 style='border-top:none'>27</td>
  <td class=xl85 style='border-top:none;border-left:none'>timer_getoverrun</td>
  <td class=xl85 style='border-top:none;border-left:none'>608</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>このテストプログラムは以下を実行します：:<br>
    a.SIGCONTシグナルのマスク<br>
    b.タイマーが終了した後、SIGCONTシグナルを生成するためタイマーを作成する<br>
    c.タイマーを1ナノ秒ごとに終了するように設定。<br>
    d.SIGCONTシグナルをブロック解除。<br>
    <br>
   
  信号はブロック解除されるときに擬似プロセスに送られ、擬似プロセスがその間にveosと共にipcシグナルを実行し、タイマーが再び終了します。このプログラムがハングアップしているため、このプロセスが繰り返され続けることになります。<br>
    この環境では、1nsecの終了時間は短すぎます。 終了時間を過ぎた後、プログラムは正常に動作します。（同期の問題）</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl78 style='height:13.5pt'></td>
  <td class=xl88 style='border-top:none'>28</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_setcanceltype</td>
  <td class=xl85 style='border-top:none;border-left:none'>672</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>&quot;pthread_cancel（）&quot;の制限によりfailします。</td>
 </tr>
 <tr height=90 style='height:67.5pt'>
  <td height=90 class=xl78 style='height:67.5pt'></td>
  <td class=xl88 style='border-top:none'>29</td>
  <td class=xl111 style='border-top:none;border-left:none'>dlclose()</td>
  <td class=xl85 style='border-top:none;border-left:none'>432</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>open
  posixテストスイートから呼び出されない<br>
    相違点：<br>
   
  dlcose（）は引数としてライブラリのアドレスを受け取り、ライブラリが見つかると0（成功）を返し、ライブラリが見つからなければ1を返します。<br>
    成功すると0を返しますが、ライブラリのアンロードは行いません。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>30</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_cond_wait</td>
  <td class=xl85 style='border-top:none;border-left:none'>432</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>FAD
  <br>
    Robust futexとそれに対応するシステムコールはサポートされていません。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>31</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_cond_destroy</td>
  <td class=xl85 style='border-top:none;border-left:none'>1128</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>FAD
  <br>
    Robust futexとそれに対応するシステムコールはサポートされていません。</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl78 style='height:13.5pt'></td>
  <td class=xl88 style='border-top:none'>32</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_attr_setschedpolicy</td>
  <td class=xl85 style='border-top:none;border-left:none'>400</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>Musl-libcは
  &quot;pthread_attr_setschedpolicy&quot;でエラーチェックをしません。</td>
 </tr>
 <tr height=90 style='height:67.5pt'>
  <td height=90 class=xl78 style='height:67.5pt'></td>
  <td class=xl88 style='border-top:none'>33</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_mutexattr_setprotocol</td>
  <td class=xl85 style='border-top:none;border-left:none'>456</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl175 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>musl-libcはPTHREAD_PRIO_NONEのみサポートしています。<br>
    musl-libcは以下の二つのフラグはサポートしていません。<br>
    PTHREAD_PRIO_INHERIT <br>
    PTHREAD_PRIO_PROTECT<br>
    </td>
 </tr>
 <tr height=108 style='height:81.0pt'>
  <td height=108 class=xl78 style='height:81.0pt'></td>
  <td class=xl88 style='border-top:none'>34</td>
  <td class=xl85 style='border-top:none;border-left:none'>aio_write</td>
  <td class=xl85 style='border-top:none;border-left:none'>408</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>aio_writeは、VEプラットフォームでは常に成功します（aio_cancelで説明されています）。<br>
    このテストケースは、書き込み後にバイト数を返すaio_returnを呼び出し、-1またはfailは返しません。<br>
    したがって、この &quot;bad aio_write return value&quot;というプリントが、VEプラットフォーム上で確認されます。</td>
 </tr>
 <tr class=xl93 height=18 style='height:13.5pt'>
  <td height=18 class=xl93 style='height:13.5pt'>　</td>
  <td class=xl88 style='border-top:none'>35</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_attr_setdetachstate</td>
  <td class=xl85 style='border-top:none;border-left:none'>504</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>Musl-libcはスレッドのデタッチ状態をチェックしません。</td>
 </tr>
 <tr height=180 style='height:135.0pt'>
  <td height=180 class=xl78 style='height:135.0pt'></td>
  <td class=xl88 style='border-top:none'>36</td>
  <td class=xl85 style='border-top:none;border-left:none'>lio_listio</td>
  <td class=xl85 style='border-top:none;border-left:none'>5744</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl86 width=93 style='border-top:none;border-left:none;width:70pt'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>2つのシナリオの相違点<br>
    <br>
    lio_listioはaio_read-write非同期コールを内部で呼び出しています<br>
    aio_cancelで説明されたものと同じ動作をします<br>
    PLATFORM VE上でライト・リード操作が成功しています。<br>
    <br>
   
  無効な引数（モードとオペコード）を与えた場合エラーが-1として返されるべきですが、glibcとしてPOSIXに準拠していないためエラーは返されません。<br>
    </td>
 </tr>
 <tr class=xl93 height=54 style='height:40.5pt'>
  <td height=54 class=xl93 style='height:40.5pt'>　</td>
  <td class=xl88 style='border-top:none'>37</td>
  <td class=xl85 style='border-top:none;border-left:none'>mlockall</td>
  <td class=xl85 style='border-top:none;border-left:none'>496</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>mlockall（）システムコールは、VEでページングがサポートされていないためVEアーキテクチャでは常に成功を返しますが、移植されたアプリケーションはmlockall（）システムコールを呼び出す可能性があります。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>38</td>
  <td class=xl85 style='border-top:none;border-left:none'>sigprocmask</td>
  <td class=xl85 style='border-top:none;border-left:none'>624</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>VEプロセスがsigprocmaskを使用してシグナルをアンロックした後に自身にシグナルを引き渡すと、システムコールの実行後にシグナルハンドラが実行される可能性があります。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>39</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_create</td>
  <td class=xl85 style='border-top:none;border-left:none'>9728</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>いくつかの場合、pthread_createが
  &quot;sched_get_priority_max&quot;＆
  &quot;pthread_attr_setschedpolicy&quot;を呼び出し、これはサポートされていません。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>40</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_exit</td>
  <td class=xl85 style='border-top:none;border-left:none'>3088</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>いくつかの場合、pthread_exitが&quot;sched_get_priority_max&quot;＆
  &quot;pthread_attr_setschedpolicy&quot;を呼び出し、これはサポートされていません。</td>
 </tr>
 <tr height=72 style='height:54.0pt'>
  <td height=72 class=xl78 style='height:54.0pt'></td>
  <td class=xl88 style='border-top:none'>41</td>
  <td class=xl85 style='border-top:none;border-left:none'>mmap</td>
  <td class=xl85 style='border-top:none;border-left:none'>1024</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>シナリオの中には、32ビットアーチをチェックするものがあり、VEアーキテクチャではサポートされていません。<br>
    RLIMIT_MEMLOCKの制限は無視されます。<br>
    </td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl88 style='border-top:none'>42</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_detach</td>
  <td class=xl85 style='border-top:none;border-left:none'>672</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>__pthread_detachは、すでに取り外し可能なスレッドを取り外す際にEINVALを返しません。</td>
 </tr>
 <tr height=162 style='height:121.5pt'>
  <td height=162 class=xl78 style='height:121.5pt'></td>
  <td class=xl88 style='border-top:none'>43</td>
  <td class=xl85 style='border-top:none;border-left:none'>sigaction</td>
  <td class=xl85 style='border-top:none;border-left:none'>744</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>FADの理由<br>
   
  Linuxとは異なり、VEアーキテクチャーでは、ハンドラーコンテキストに入る前に、メインコンテキスト（シグナルが渡されたとき）でプロセスを再開できる可能性があります。したがって、シグナル（kill（）、tkill（）、tgkill（）、pthread_kill（））送信後にチャックが行われた場合、ハンドラコンテキストで更新された変数を使用してハンドラが呼び出されたかどうかを確認するチェックは<ruby>失敗<span
  style='display:none'><rt>シッパイ</rt></span></ruby>する<ruby>可能性<span
  style='display:none'><rt>カノウセイ</rt></span></ruby>があります。。<br>
    <br>
    </td>
 </tr>
 <tr height=108 style='height:81.0pt'>
  <td height=108 class=xl78 style='height:81.0pt'></td>
  <td class=xl88 style='border-top:none'>44</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_mutex_trylock</td>
  <td class=xl85 style='border-top:none;border-left:none'>640</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>FAD
  (Function As Designed). <br>
    LTP open-posix-testsuiteのすべてのテストケースはPASSしていますが、robust
  futexを使用するとmutexは部分的にサポートされます。<br>
    <br>
    Robust futexとそれに対応するシステムコールは、VE環境ではサポートされていないためです。</td>
 </tr>
 <tr height=108 style='height:81.0pt'>
  <td height=108 class=xl78 style='height:81.0pt'></td>
  <td class=xl88 style='border-top:none'>45</td>
  <td class=xl85 style='border-top:none;border-left:none'>sendmsg</td>
  <td class=xl85 style='border-top:none;border-left:none'>1904</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>open
  posixテストスイートから呼び出されない<br>
    相違点：<br>
    有効な長さとともに無効なバッファポインタ（msg_control）が渡されたネガティブテストケースを実行している間。<br>
    crash / sigsegvという結果になるライブラリの場合はmuslでは扱われません。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>46</td>
  <td class=xl85 style='border-top:none;border-left:none'>statfs</td>
  <td class=xl85 style='border-top:none;border-left:none'>728</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>open
  posixテストスイートから呼び出されない<br>
    相違点：<br>
    不正なアドレスバッファを初期化しようとするMusl libc</td>
 </tr>
 <tr height=72 style='height:54.0pt'>
  <td height=72 class=xl78 style='height:54.0pt'></td>
  <td class=xl88 style='border-top:none'>47</td>
  <td class=xl85 style='border-top:none;border-left:none'>fstatfs</td>
  <td class=xl85 style='border-top:none;border-left:none'>736</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>open
  posixテストスイートから呼び出されない<br>
    相違点：<br>
    status（）が無効なstat buffを指定して呼び出された場合、Muslはそれを逆参照し、クラッシュするローカルバッファで初期化します。</td>
 </tr>
 <tr height=126 style='height:94.5pt'>
  <td height=126 class=xl78 style='height:94.5pt'></td>
  <td class=xl88 style='border-top:none'>48</td>
  <td class=xl85 style='border-top:none;border-left:none'>open</td>
  <td class=xl85 style='border-top:none;border-left:none'>1152</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>open
  posixテストスイートから呼び出されない<br>
    相違点：<br>
   
  理想的にはglibcにおいては、オープンsyscallをO_PATHフラグとともに使用すると、ファイル自体はオープンされず、read/write/fchmodファイル操作はエラーEBADFで失敗します。<br>
    しかしmuslの場合同じフラグで、入出力操作はEBADFの代わりに0を返します。</td>
 </tr>
 <tr height=144 style='height:108.0pt'>
  <td height=144 class=xl78 style='height:108.0pt'></td>
  <td class=xl88 style='border-top:none'>49</td>
  <td class=xl85 style='border-top:none;border-left:none'>getcwd</td>
  <td class=xl85 style='border-top:none;border-left:none'>992</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>open
  posixテストスイートから呼び出されない.<br>
    相違点:<br>
    Muslによる処理が正しくありません。<br>
   
  無効なアドレス（NON-NULL値）が渡された場合、musl-libcはローカルバッファを内部で割り当て、カーネルのシステムコールハンドラに引数として渡します。しかし無効なnon-nullアドレス/バッファが渡された場合、LTPではEFAULTが予想されます。<br>
    </td>
 </tr>
 <tr height=90 style='height:67.5pt'>
  <td height=90 class=xl78 style='height:67.5pt'></td>
  <td class=xl88 style='border-top:none'>50</td>
  <td class=xl85 style='border-top:none;border-left:none'>epol-ltp</td>
  <td class=xl85 style='border-top:none;border-left:none'>　</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>これはmuslライブラリとの依存関係によるものです。<br>
    Musl-libc &quot;epoll_create（）&quot;は常に0のフラグでepoll_create1（）を呼び出します。<br>
    &quot;epoll_create（-1）&quot;が呼び出された場合、内部で
  &quot;epoll_create1（0）&quot;が呼び出されます。</td>
 </tr>
 <tr height=90 style='height:67.5pt'>
  <td height=90 class=xl78 style='height:67.5pt'></td>
  <td class=xl88 style='border-top:none'>51</td>
  <td class=xl85 style='border-top:none;border-left:none'>epoll_create</td>
  <td class=xl85 style='border-top:none;border-left:none'>432</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>これはmuslライブラリとの依存関係によるものです。<br>
    Musl-libc &quot;epoll_create（）&quot;は常に0のフラグでepoll_create1（）を呼び出します。<br>
    &quot;epoll_create（-1）&quot;が呼び出された場合、内部的には
  &quot;epoll_create1（0）&quot;が呼び出され、これにより0より大きい値が返されます。</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl88 style='border-top:none'>52</td>
  <td class=xl85 style='border-top:none;border-left:none'>getdtablesize</td>
  <td class=xl85 style='border-top:none;border-left:none'>488</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>getdtablesize（）systemcallはrlimit_maxを返すMuslとは異なる値を返します。一方glibcはrlimit_currを返します。</td>
 </tr>
 <tr height=144 style='height:108.0pt'>
  <td height=144 class=xl78 style='height:108.0pt'></td>
  <td class=xl88 style='border-top:none'>53</td>
  <td class=xl85 style='border-top:none;border-left:none'>mprotect</td>
  <td class=xl85 style='border-top:none;border-left:none'>864</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>open
  posixテストスイートから呼び出されない<br>
    相違点:<br>
   
  mprotect（）ライブラリラッパーでは、アライメントされていないアドレスが渡された場合、musl-libcはアドレスをページアライメントで切り捨て、サイズはアライメントされていないアドレスと受け取った長さに切り上げられます。<br>
    予想 : 　<br>
    アラインされていないアドレスが受信されると、EINVALがシステムコールから受信されます。</td>
 </tr>
 <tr height=68 style='mso-height-source:userset;height:51.0pt'>
  <td height=68 class=xl78 style='height:51.0pt'></td>
  <td class=xl88 style='border-top:none'>54</td>
  <td class=xl85 style='border-top:none;border-left:none'>Confstr</td>
  <td class=xl85 style='border-top:none;border-left:none'>960</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>FAD</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>&quot;_CS_V7_ENV&quot;は、
  &quot;POSIXLY_CORRECT&quot;の値を取得するためにconfstrに渡されるフラグです。値が1の場合、ライブラリがposix準拠であることを意味します。</td>
 </tr>
 <tr height=72 style='height:54.0pt'>
  <td height=72 class=xl78 style='height:54.0pt'></td>
  <td class=xl88 style='border-top:none'>55</td>
  <td class=xl85 style='border-top:none;border-left:none'>munlockall</td>
  <td class=xl85 style='border-top:none;border-left:none'>504</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>この関数は、ページングがサポートされていないので、常に成功を返しますが、移植されたアプリケーションはmunlockall（）システムコールを呼び出す可能性があります。<br>
    </td>
 </tr>
 <tr height=342 style='height:256.5pt'>
  <td height=342 class=xl78 style='height:256.5pt'></td>
  <td class=xl88 style='border-top:none'>56</td>
  <td class=xl86 width=264 style='border-top:none;border-left:none;width:198pt'>aio_read<br>
    </td>
  <td class=xl85 style='border-top:none;border-left:none'>448</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>このAPIは、musl-sideでサポートされていません。<br>
    1.&gt;このaio_readによって使用される構造体aiocbに存在する変数
  &quot;aio_reqprio&quot;はmusl-libc側では使用されていません。<br>
    2.&gt; aio_readはVEでは直ちにリターンし、aio_errorがステータスを収集するのを待ちません。<br>
    LTPの結果：<br>
    struct aiocbコードの負のfdに対してmuslが-1をリターンし、aio_read（＆aiocb）！= 0を<ruby>入力<span
  style='display:none'><rt>ニュウリョク</rt></span></ruby>し、FAILを返すため10-1.cは<ruby>失敗<span
  style='display:none'><rt>シッパイ</rt></span></ruby>します。<br>
    また、aio_readは直ちにVEを返し、aio_errorが後でステータスを収集するのを<ruby>待<span style='display:
  none'><rt>マ</rt></span></ruby>ちません。<br>
    11-2.c aio_reqprioの値はmusl-libcでサポートされていないので、test-programには意味がありません。<br>
    9-1.c glibcとmusl-libcはPTS_UNSUPPORTEDでテストプログラムが失敗します。<br>
    8-1.c muslはsysconf
  _SC_PRIORITIZED_IOのこの値を-1として初期化します。したがって、testprogramはPTS_UNTESTEDで失敗します。<br>
    glibc CONF_IS_DEFINED_SETマクロは、sysconfで-1または有効な値（200809L）を返すために使用されます。<br>
    したがってテストケースはパスします。</td>
 </tr>
 <tr height=126 style='height:94.5pt'>
  <td height=126 class=xl78 style='height:94.5pt'></td>
  <td class=xl88 style='border-top:none'>57</td>
  <td class=xl85 style='border-top:none;border-left:none'>pthread_cond_timedwait</td>
  <td class=xl85 style='border-top:none;border-left:none'>8880</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>1.テストケース2-5.cが100個のスレッドを作成しようとしていますが、VE環境ではプロセスあたり64個のスレッドしかサポートされていません。<br>
    <br>
   
  2.テストケース2-6.cは、pthread_cancelに制限があるためハングします（つまり、syscallが完了するまでキャンセルハンドラは呼び出されません）。
  これが動作するには、テストケースを更新する必要があります。<br>
    </td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl88 style='border-top:none'>58</td>
  <td class=xl85 style='border-top:none;border-left:none'>__pthread_key_delete</td>
  <td class=xl85 style='border-top:none;border-left:none'>432</td>
  <td class=xl85 style='border-top:none;border-left:none'>部分的なサポート</td>
  <td class=xl85 style='border-top:none;border-left:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>詳細については、musl-glibcの<ruby>相違点<span
  style='display:none'><rt>ソウイテン</rt></span></ruby> シート、ポイントNo.47をご確認ください。</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl172>59</td>
  <td class=xl173>pthread_key_delete</td>
  <td class=xl174 style='border-left:none'>448</td>
  <td class=xl145>部分的なサポート</td>
  <td class=xl173>　</td>
  <td class=xl158 width=463 style='border-left:none;width:347pt'>詳細については、musl-glibcの相違点
  シート、ポイントNo.47をご確認ください。</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 class=xl78 style='height:13.5pt'></td>
  <td class=xl88 style='border-top:none'>60</td>
  <td class=xl143 style='border-top:none'>pthread_attr_setinheritsched</td>
  <td class=xl141 style='border-top:none;border-left:none'>504</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>Musl-libcはPTHREAD_EXPLICIT_SCHEDマクロをサポートしていません。</td>
 </tr>
 <tr height=162 style='height:121.5pt'>
  <td height=162 class=xl78 style='height:121.5pt'></td>
  <td class=xl88 style='border-top:none'>61</td>
  <td class=xl143 style='border-top:none'>pthread_rwlock_unlock</td>
  <td class=xl141 style='border-top:none;border-left:none'>1216</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>musl-libcでは、このコードは失敗してもrrnoをリターンしません。<br>
    LTPにおいて、<br>
    1.テストケース3-1.cは、VE環境でサポートされていないpthread_setschedparamのために失敗しました。<br>
    2.テストケース4-1.cおよび4-2.cは、テストケースが__linux__が定義されている<ruby>際<span
  style='display:none'><rt>サイ</rt></span></ruby>に、PTS_UNSUPPORTEDを内部でリターンするため、UNSUPPORTEDを返します。<br>
    <br>
    </td>
 </tr>
 <tr height=108 style='height:81.0pt'>
  <td height=108 class=xl78 style='height:81.0pt'></td>
  <td class=xl88 style='border-top:none'>62</td>
  <td class=xl143 style='border-top:none'>pthread_mutex_init</td>
  <td class=xl141 style='border-top:none;border-left:none'>3584</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'><br>
    musl-libcでは、このコードは<ruby>失敗<span style='display:none'><rt>シッパイ</rt></span></ruby>してもerrnoをリターンしません。<br>
    ltpでは、<br>
   
  1.テストケース1-2.cおよび3-2.cは、pthread_cancelにある制限があるため、ハング状態になります（つまり、キャンセルハンドラはsyscallの完了後にのみ呼び出されます）。</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl88 style='border-top:none'>63</td>
  <td class=xl143 style='border-top:none'>pthread_setspecific</td>
  <td class=xl141 style='border-top:none;border-left:none'>600</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>詳細については、musl-glibcの相違点
  シート、ポイントNo.45をご確認ください。</td>
 </tr>
 <tr height=144 style='height:108.0pt'>
  <td height=144 class=xl78 style='height:108.0pt'></td>
  <td class=xl88 style='border-top:none'>64</td>
  <td class=xl143 style='border-top:none'>pthread_mutex_lock</td>
  <td class=xl141 style='border-top:none;border-left:none'>736</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'><br>
    1.テスト・ケース5-1.cは、LTPスクリプトがバイナリとともにタイムアウト引数（t0.val = 142s appr）を渡すため失敗します。
  タイムアウトが終了すると、テストケースはHUNGで失敗します。<br>
    <br>
    詳細は、No.26のmusl-glibc<ruby>相違点<span style='display:none'><rt>ソウイテン</rt></span></ruby>シートをチェックしてください。<br>
    <br>
    また、VE環境では、robust mutexはサポートされていません。</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl88 style='border-top:none'>65</td>
  <td class=xl143 style='border-top:none'>pthread_barrierattr_setpshared</td>
  <td class=xl141 style='border-top:none;border-left:none'>472</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>LTPによると、すべてのテストケースがパスしています。
  失敗はスクリプトによるものです</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>66</td>
  <td class=xl143 style='border-top:none'>pthread_barrier_destroy</td>
  <td class=xl141 style='border-top:none;border-left:none'>1000</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>LTPによると、すべてのテストケースがパスしています。<br>
    <br>
    詳細は、No.26のmusl-glibc相違点シートをチェックしてください。</td>
 </tr>
 <tr height=54 style='height:40.5pt'>
  <td height=54 class=xl78 style='height:40.5pt'></td>
  <td class=xl88 style='border-top:none'>67</td>
  <td class=xl143 style='border-top:none'>pthread_getcpuclockid</td>
  <td class=xl141 style='border-top:none;border-left:none'>480</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>LTPによると、すべてのテストケースがパスしています。<br>
    <br>
    詳細は、No.40のmusl-glibc相違点シートをチェックしてください。</td>
 </tr>
 <tr height=90 style='height:67.5pt'>
  <td height=90 class=xl78 style='height:67.5pt'></td>
  <td class=xl88 style='border-top:none'>68</td>
  <td class=xl143 style='border-top:none'>pthread_rwlock_rdlock</td>
  <td class=xl141 style='border-top:none;border-left:none'>448</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>pthread_setschedparamがVE<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby>でサポートされていないため、テストケース (2-1.c
  &amp; 2-2.c)は<ruby>失敗<span style='display:none'><rt>シッパイ</rt></span></ruby>しています。その<ruby>他<span
  style='display:none'><rt>タ</rt></span></ruby><ruby>全<span style='display:
  none'><rt>スベ</rt></span></ruby>てのプログラムはPassしています。<br>
    <br>
    詳細は、No.29のmusl-glibc相違点シートをチェックしてください。</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl88 style='border-top:none'>69</td>
  <td class=xl143 style='border-top:none'>mlock</td>
  <td class=xl141 style='border-top:none;border-left:none'>520</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>VEOSはmlock()に<ruby>対<span
  style='display:none'><rt>タイ</rt></span></ruby>して<ruby>常<span
  style='display:none'><rt>ツネ</rt></span></ruby>に<ruby>成功<span
  style='display:none'><rt>セイコウ</rt></span></ruby>を<ruby>返<span
  style='display:none'><rt>カエ</rt></span></ruby>します。<br>
    <ruby>内部的<span style='display:none'><rt>ナイブテキ</rt></span></ruby>にアクティビティは実行されませんが、0が返されます。</td>
 </tr>
 <tr height=36 style='height:27.0pt'>
  <td height=36 class=xl78 style='height:27.0pt'></td>
  <td class=xl88 style='border-top:none'>70</td>
  <td class=xl143 style='border-top:none'>munlock</td>
  <td class=xl141 style='border-top:none;border-left:none'>520</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>VEOSはmlock()に対して常に成功を返します。<br>
    内部的にアクティビティは実行されませんが、0が返されます。</td>
 </tr>
 <tr height=90 style='height:67.5pt'>
  <td height=90 class=xl78 style='height:67.5pt'></td>
  <td class=xl88 style='border-top:none'>71</td>
  <td class=xl143 style='border-top:none'>aio_fsync</td>
  <td class=xl141 style='border-top:none;border-left:none'>672</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>このAPIにはmusl-sideからのサポートはありません。<br>
    不正なファイル記述子が渡されると、errnoはEBADFとして設定されません。<br>
    aio_fsync
  APIがerrnoをEBADFに設定していないので、ltibの12-1.cはVEにおいて失敗します。glibc.Muslにはサポートがありません。</td>
 </tr>
 <tr height=234 style='height:175.5pt'>
  <td height=234 class=xl78 style='height:175.5pt'></td>
  <td class=xl88 style='border-top:none'>72</td>
  <td class=xl143 style='border-top:none'>clock_getcpuclockid</td>
  <td class=xl141 style='border-top:none;border-left:none'>688</td>
  <td class=xl85 style='border-top:none'>部分的なサポート</td>
  <td class=xl143 style='border-top:none'>　</td>
  <td class=xl89 width=463 style='border-top:none;border-left:none;width:347pt'>API
  clock_getcpuclockidは、getpid（）以外のpidがこのAPIに渡されたときにEPERMを返す必要があります。<br>
    LTPテストプログラムによると：<br>
    1.&gt; 1-1.cはLARGENUMBER（900000）という非常に大きな値を持っています。<br>
    &nbsp; タイマー値は142秒以下ですが、プログラムには時間がかかるため、ハングします。<br>
    2. glibcコードログにおいてこのapiで使用されているpidチェックのため、5-1.cがglibcで失敗します。<br>
    <br>
    <font class="font13">if (pid != 0 &amp;&amp; pid != getpid ())<br>
    <span style='mso-spacerun:yes'>        </span>return EPERM;<br>
    </font></td>
 </tr>
 <tr height=37 style='height:27.75pt'>
  <td height=37 class=xl78 style='height:27.75pt'></td>
  <td class=xl171 style='border-top:none'>73</td>
  <td class=xl144 style='border-top:none'>sbrk</td>
  <td class=xl142 style='border-top:none;border-left:none'>560</td>
  <td class=xl91 style='border-top:none'>部分的なサポート</td>
  <td class=xl144 style='border-top:none'>　</td>
  <td class=xl92 width=463 style='border-top:none;border-left:none;width:347pt'><ruby>引数<span
  style='display:none'><rt>ヒキスウ</rt></span></ruby> (inc)はゼロである<ruby>必要<span
  style='display:none'><rt>ヒツヨウ</rt></span></ruby>があります。 それ以外の場合、このAPIは失敗します。</td>
 </tr>
 <![if supportMisalignedColumns]>
 <tr height=0 style='display:none'>
  <td width=30 style='width:23pt'></td>
  <td width=73 style='width:55pt'></td>
  <td width=264 style='width:198pt'></td>
  <td width=73 style='width:55pt'></td>
  <td width=127 style='width:95pt'></td>
  <td width=93 style='width:70pt'></td>
  <td width=463 style='width:347pt'></td>
 </tr>
 <![endif]>
</table>

</body>

</html>
